<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Jim Deng</title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on Jim Deng</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Aug 2024 23:43:34 +0800</lastBuildDate>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>剑指offer(Go版本)-数组</title>
      <link>//localhost:1313/posts/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offergo%E7%89%88%E6%9C%AC-%E6%95%B0%E7%BB%84.zh-cn/</link>
      <pubDate>Sat, 31 Aug 2024 23:43:34 +0800</pubDate>
      <guid>//localhost:1313/posts/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offergo%E7%89%88%E6%9C%AC-%E6%95%B0%E7%BB%84.zh-cn/</guid>
      <description>剑指offer(Go版本)-数组 1.和为S的两个数字 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
对应每个测试案例，输出两个数，小的先输出。
思路：双指针，i := 0 j := length - 1 func findNumbersWithSum(a []int, sum int) []int { result := []int{} length := len(a) if length == 0 { return result } i := 0 j := length - 1 for i &amp;lt; j { if a[i]+a[j] == sum { result = append(result, i, j) break } if a[i]+a[j] &amp;lt; sum { i++ } if a[i]+a[j] &amp;gt; sum { j-- } } return result } 2.</description>
    </item>
  </channel>
</rss>
